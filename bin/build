#!/usr/bin/env bash

# Usage: compile <layers_dir> <cache_dir> <env_dir>

# fail fast and loudly
# set -euo pipefail
# set -eu
set -eo pipefail

layers_dir=$1
env_dir=$2/env
plan_path=$3

vips_layer=$layers_dir/libvips
cache_dir=$layers_dir/libvips-cache
tmp_layer=$layers_dir/.libvips-tmp
vendor_path=$layers_dir/.heroku
vips_path=$vendor_path/vips

BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

arrow() {
  sed 's/^/-----> /'
}

ensure_dirs() {
  echo "[BUILD vipslayer]"
  mkdir -p $vips_layer
  mkdir -p $tmp_layer
  mkdir -p $vips_path
  mkdir -p $cache_dir
  echo "VIPS $vips_layer"
  echo "TMP $tmp_layer"
  echo "PATH $vips_path"
  echo "CACHE $cache_dir"
}

cleanup_build() {
  rm -Rf $tmp_layer
}

export_profile() {
  echo "Export Profile"
  mkdir -p $layers_dir/.profile.d
  cp $BP_DIR/.profile.d/* $layers_dir/.profile.d/
}

install_libvips() {
  detect_libvips_version

  if [[ -d "$cache_dir/$LIBVIPS_VERSION" ]]; then
    restore_cached_build
  else
    build_libvips
  fi
}

detect_libvips_version() {
  [[ ! -d $env_dir ]] && exit 1

  if [[ -r "$env_dir/LIBVIPS_VERSION" ]]; then
    export LIBVIPS_VERSION=$(cat "$env_dir/LIBVIPS_VERSION")
  else
    echo "Checking for latest libvips version" | indent
    export LIBVIPS_VERSION=$(detect_latest_version)
  fi
}

detect_latest_version() {
  curl -s https://api.github.com/repos/libvips/libvips/releases/latest \
    | grep "browser_download_url.*tar.gz" \
    | head -1 \
    | cut -d : -f 2,3 \
    | tr -d \" \
    | grep "[0-9]*\.[0-9]*\.[0-9]" -o \
    | head -1
}

restore_cached_build() {
  echo "Restoring cached libvips build" | indent
  cp -R "$cache_dir/$LIBVIPS_VERSION/." $vips_path
}

build_libvips() {
  echo "Building libvips binary..." | arrow

  download_libvips \
    && unpack_source_archive \
    && cd $tmp_layer \
    && configure_and_compile \
    && make -s install > /dev/null 2>& 1 \
    && cd ~ \
    && cache_build
}

download_libvips() {
  rm -Rf $cache_dir/*

  local download_path="$tmp_layer/libvips.tar.gz"

  echo "Downloading libvips ${LIBVIPS_VERSION} source archive" | indent
  curl -sL "https://github.com/libvips/libvips/releases/download/v${LIBVIPS_VERSION}/vips-${LIBVIPS_VERSION}.tar.gz" -o $download_path
}

unpack_source_archive() {
  echo "Unpacking libvips source archive" | indent \
    && tar xf "$tmp_layer/libvips.tar.gz" -C $tmp_layer --strip 1
}

configure_and_compile() {
  echo "Compiling libvips" | indent \
    && ./configure --prefix $vips_path --enable-shared --disable-static \
      --disable-dependency-tracking --disable-debug --disable-introspection \
      --without-fftw --without-pangoft2 --without-ppm \
      --without-analyze --without-radiance > /dev/null 2>& 1 \
    && make -s > /dev/null 2>& 1
}

cache_build() {
  echo "Caching binaries" | indent

  cp -R "$vips_path/." "$cache_dir/$LIBVIPS_VERSION"
}

ensure_dirs
install_libvips
cleanup_build
export_profile